---
openapi: 3.0.1
info:
  title: Payroll API
  description: A full flagged payroll api provided by Teal
  version: 1.0.0
servers:
  - url: https://api.sandbox.goteal.co
    description: Sandbox server for experiments
  - url: https://api.goteal.co/v1
    description: Production server
security:
- ApiKeyAuth: []
paths:
  "/users":
    description: A User represents the borrowers and end-users that
                 give consented access and/or upload their payslips to our API.
    post:
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatedUser"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
        '409':
          "$ref": "#/components/responses/ConflictedResource"

    get:
      summary: List all users.
      parameters:
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [name, email, created_at]
            default: created_at
            example: name
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/PaginationWithOrderedBy"
                  users:
                    type: array
                    items:
                      "$ref": "#/components/schemas/CreatedUser"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}":
    description: A User represents the borrowers and end-users that give
                 consented access and/or upload their payslips to our API.
    get:
      summary: Creates a user.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to delete.
      responses: 
        '200':
          description: REturns the user details
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatedUser"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    delete:
      summary: Deletes a user along with all the files, accounts, entries and payroll submission associated with it.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to delete.
      responses: 
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully.
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
        '404':
          "$ref": "#/components/responses/ResourceNotFound"
  "/user-tokens":
    post:
      summary: Generate a link token for authentication in subsequent steps to a unique user ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                user_id:
                  type: string
                  description: The id of the user
                  example: 95a0e70b-fe02-4f47-aef9-2efff279df71
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserToken"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/accounts":
    description: Account are the payroll and HR platform accesses that users link to Teal,
                 providing a stream of income and employment data
    post:
      summary: Creates an account for the user e.g. a Xero account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required: ["user_id"]
                  properties:
                    user_id:
                      type: string
                      description: The id of the user
                      example: 95a0e70b-fe02-4f47-aef9-2efff279df71
                - "$ref": "#/components/schemas/Accounts"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/AccountsResult"
                  - type: object
                    properties:
                      authorization_url:
                        type: string
                        description: Authrorization url for provider using OAUTH2
                        example: https://provider/authenticate?redirect_url=https://api.teal.com/auth&state=state&scope=read
                        

        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    get:
      summary: Returns all accounts for the user (e.g. Xero accounts)
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to get accounts for
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
            default: 500
      responses: 
        '200':
          description: Successfully retrieved accounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
                  accounts:
                    type: array
                    items:
                      "$ref": "#/components/schemas/AccountsResult"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/accounts/{account_id}":
    description: Account are the payroll and HR platform accesses that users link to Teal,
                 providing a stream of income and employment data
    delete:
      summary: Deletes an account for the user (e.g. a Xero account)
      parameters:
        - in: path
          name: account_id
          schema:
            type: string
          required: true
          description: ID of the account to delete
      responses: 
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account deleted successfully.
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
        '404':
          "$ref": "#/components/responses/ResourceNotFound"
    get:
      summary: Retrieve an account with an account ID
      parameters:
        - in: path
          name: account_id
          schema:
            type: string
          required: true
          description: ID of the account to retrieve
      responses:
        '200':
          description: Succesfully retrieved account
          content:
            application/json:
              schema:
                "$ref" : "#/components/schemas/AccountsResult"
        '404':
          "$ref": "#/components/responses/ResourceNotFound"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"

  "/entries":
    get:
      summary: Returns all entries for a user account sorted desc by created_at
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to get entries for
        - name: account_id
          in: query
          description: The offset to start at
          required: false
          schema:
            type: string
            format: uuid
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
                  entries:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Entry"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/entries/{entry_id}":
    delete:
      summary: Deletes an entry for the user
      parameters:
        - in: path
          name: entry_id
          schema:
            type: string
          required: true
          description: ID of the entry to delete
      responses: 
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Entry deleted successfully.
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
        '404':
          "$ref": "#/components/responses/ResourceNotFound"
  "/entries/connections":
    description: For an account, a call to the `/entries/connections` endpoint will query the
                 connection for data. This endpoint is for adhoc data retrieval for an account;
                 Teal will also collect the payroll data for users via the WebUI as soon
                 as a valid connection is established. This endpoint can be applied to any 
                 account, it does not matter if it was established via your own call to 
                 `POST /accounts` or via the Teal WebUI. Note that any new data retrieved via 
                 `/entries/connections` is persisted on Teal's storage and can be retrieved using 
                 the `/payroll/{user_id}` endpoint. 
    post:
      summary: Connects a user account to a payroll provider
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [account_id]
              properties:
                account_id:
                  type: string
                  format: uuid
                  description: The account id to use to connect to the payroll provider
                  example: 95a0e70b-fe02-4f47-aef9-2efff279df71
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PayrollData"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedBearer"
  "/entries/payslips":
    post:
      summary: Fetches payslips for a user account
      description: Uploads payslips as a multipart form data http request.
                   Every payslip must be a searchable and readable PDF file.
                   Scanned images as pdf files are not supported.
                   If a file part header `external_document_id` is provided it
                   will be returned as `document_external_id` in the respective
                   payroll submission. If the header is not provided, the form
                   field name for the file part will be used instead.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                payslip:
                  type: string
                  format: binary
                  description: File to upload
                  example: >
                    @"/local/file/system/path/to/payslip/Payslip_44404148.pdf"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PayrollData"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedBearer"
  "/payroll/{user_id}":
    get:
      summary: Returns all plants from the system that the user has access to
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to get payroll for
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [account_id, entry_id, created_at]
            default: created_at
            example: name
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: account_id
          in: query
          description: The account_id to fileter on
          required: false
          schema:
            type: string
            format: uuid
        - name: entry_id
          in: query
          description: The account_id to fileter on
          required: false
          schema:
            type: string
            format: uuid
        - name: document_external_id
          in: query
          description: The document_external_id to fileter on
          required: false
          schema:
            type: string
        - name: created_after
          in: query
          description: Filter out payroll dated before the given date
          required: false
          schema:
            type: string
            format: date-time
            example: 2019-05-17T00:00:00.000Z
        - name: created_before
          in: query
          description: Filter out payroll dated after the given date
          required: false
          schema:
            type: string
            format: date-time
            example: 2019-05-17T00:00:00.000Z
      responses:
        '200':
          description: Plant response
          content:
            application/json:
              schema:
                type: object
                required: [pagination, payroll_submissions]
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
                  payroll_submissions: 
                    type: array
                    items:
                      "$ref": "#/components/schemas/PayrollSubmission"
        '400':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/documents/{document_id}":
    get:
      summary: Returns all documents for a user entry
      parameters:
        - in: path
          name: document_id
          schema:
            type: string
          required: true
          description: The id of the file
      responses: 
        '200':
          description: Document response
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/DocumentResponse"
                - properties:
                    file_contents:
                      type: string
                      description: Base-64 encoded string containing file contents
                      example: "JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PC9UaXRsZSAoS..."
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    delete:
      summary: Deletes a document by id
      parameters:
        - in: path
          name: document_id
          schema:
            type: string
          required: true
          description: The id of the file
      responses:
        '204':
          description: No content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Document [14a542ed-f060-42cc-9b13-dea206cd9837] deleted
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
        '404':
          "$ref": "#/components/responses/ResourceNotFound"
  "/documents":
    get:
      summary: List all documents for a user.
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to get documents for
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Document response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
                  documents:
                    type: array
                    items:
                      allOf:
                      - "$ref": "#/components/schemas/DocumentResponse"
                      - properties:
                          file_contents:
                            type: string
                            description: Location to download the document
                            example: "/documents/a9249254-ab10-4a2d-b709-eda95f5ecd59"
        '400':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/webhooks":
    post:
      summary: Creates a webhook.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Webhook"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatedWebhook"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    get:
      summary: Lists all the webhooks
      parameters:
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [name, url, created_at]
            default: created_at
            example: name
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
                  users:
                    type: array
                    items:
                      "$ref": "#/components/schemas/CreatedWebhook"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/webhooks/{webhook_id}":
    get:
      summary: Returns a webhook.
      parameters:
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
          description: ID of the webhook to get
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatedWebhook"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    delete:
      summary: Deletes a webhook.
      parameters:
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
          description: ID of the webhook to delete
      responses: 
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Webhook deleted successfully.
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
        '404':
          "$ref": "#/components/responses/ResourceNotFound"
components:
  responses:
    UnauthorizedApiKey:
      description: Unauthorized if the X-API-KEY is not provided or is wrong
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Unauthorized"
    BadRequest:
      description: Bad request if one of the required parameters is missing
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Error"
    ConflictedResource:
      description: Conflicted resource when creating if that resource already exists
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Conflict"
    UnauthorizedBearer:
      description: Unauthorized if the X-API-KEY is not provided or is wrong
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnauthorizedBarer"
    ResourceNotFound:
      description: Resource not found
      content:
        applcation/json:
          schema:
            "$ref": "#/components/schemas/NotFound"
  schemas:
    Date:
      type: string
      format: date-time
      example: 2019-05-17T00:00:00.000Z
    PaginationWithOrderedBy:
      type: object
      allOf:
      - "$ref": "#/components/schemas/Pagination"
      required: [offset, limit, count, ordered_by]
      properties:
        ordered_by:
          type: string
          example: created_at
    Pagination:
      type: object
      required: [offset, limit, count]
      properties:
        offset:
          description: The offset to start at - zero based
          type: integer
          format: int32
          minimum: 1
          default: 0
          example: 75
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 20
          example: 25
        count:
          type: integer
          format: int32
          example: 14
          minimum: 0
        total_count:
          type: integer
          format: int32
          example: 89
    User:
      required: [name, email]
      type: object
      properties:
        name:
          description: The full name of the user. It doens't have to be unique for the client.
          type: string
          example: John Smith
        email:
          description: The email of the user. The field does not have to be a real email address. It can be the user’s identifier in your system.
          type: string
          format: email
          example: john.smith@company.com
    CreatedUser:
      allOf:
      - required: [user_id, created_at]
        properties:
          user_id:
            type: string
            format: uuid
            description: Unique identifier for user
          created_at:
            "$ref": "#/components/schemas/Date"
            description: Creation time in UTC of the user
      - "$ref": "#/components/schemas/User"
    UserToken:
      type: object
      required: [token, created_at]
      properties:
        token:
          type: string
          description: The token to be used in subsequent requests
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiOTVhMGU3MGItZmUwMi00ZjQ3LWFlZjktMmVmZmYyNzlkZjcxIiwiaWF0IjoxNTE2MjM5MDIyfQ.4S5J
        created_at:
            "$ref": "#/components/schemas/Date"
    Accounts:
      type: object
      required: [payroll_provider]
      properties:
        payroll_provider:
          type: string
          description: The payroll provider to use
          example: quickbooks
        user_name:
          type: string
          description: The login of the user
          example: john.smith@company.com
        password:
          type: string
          description: The password of the user
          example: very-secret-password
    AccountsResult:
      type: object
      required: [payroll_provider, user_name, created_at, account_id]
      properties:
        account_id:
          type: string
          description: The id of the account
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        payroll_provider:
          type: string
          description: The payroll provider to use
          example: quickbooks
        user_name:
          type: string
          description: The login of the user
          example: john.smith@company.com
        status:
          type: string
          description: Status of account
          example: PENDING
        created_at:
            "$ref": "#/components/schemas/Date"
    Entry:
      type: object
      properties:
        account_id:
          type: string
          format: uuid
          description: The id of the account
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        entry_id:
          type: string
          format: uuid
          description: The id of the entry
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        created_at:
            "$ref": "#/components/schemas/Date"
    DocumentResponse:
      type: object
      required: ["document_id", "file_name", "type", "upload_time", "file_contents"]
      properties:
        document_id:
          type: string
          format: uuid
          description: A unique document identifier
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        file_name:
          type: string
          description: Name of the file
          example: payslip1.pdf
        document_external_id:
          type: string
          description: A string coming from the parameters of the 
                       uploaded payslip1.pdf either the form field name
                       or `external_document_id` header for the file part.
                       It might not be unique and depends
                       on what's passed when uploading.
          example: payslip123456
        type:
          type: string
          description: The type of document
          example: "Payslip"
        upload_time:
          "$ref": "#/components/schemas/Date"
    PayrollData:
      type: object
      required: [account_id, entry_id, pagination, payroll_submissions]
      properties:
        account_id:
          type: string
          format: uuid
          description: The id of the account
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        entry_id:
          type: string
          format: uuid
          description: The id of the entry
        payroll_submissions: 
          type: array
          items:
            "$ref": "#/components/schemas/PayrollSubmission"
    Webhook:
      type: object
      required: [name, events, url]
      properties:
        name:
          type: string
          description: A unique name of the webhook
          example: user-payroll-submitted
        events:
          type: array
          items:
            type: string
          example: ["user-payroll-submitted", "user-payroll-created"]
        url:
          type: string
          format: url
          example: https://webhooks.company.com
        secret:
          type: string
          description: A secret to sign the body of the webhook as described at "https://docs.goteal.co"
          writeOnly: true # Not included in response objects
          example: very-secret
        config:
          type: object
          description: Configuration properties of the webhook
          writeOnly: true
          properties:
            include_payload:
              type: boolean
              description: Whether to include or not the payload of the event in the webhook
              example: true
    CreatedWebhook:
      allOf:
      - required: [webhook_id]
        properties:
          webhook_id:
            type: string
            description: The id of the webhook
            example: 95a0e70b-fe02-4f47-aef9-2efff279df71
      - "$ref": "#/components/schemas/Webhook"
      - required: [created_at]
        properties:
          created_at:
            "$ref": "#/components/schemas/Date"
    Error:
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          description: An array of messages describing the errors
          example: ["The request is missing the required field `name`"]
    Unauthorized:
      type: object
      properties:
        errors:
          type: string
          description: An array of messages describing the errors
          example: ["No X-API-KEY header provided or wrong value"]
    UnauthorizedBarer:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          description: An array of messages describing the errors
          example: ["Not Authorization: Bearer <token> provided or wrong value"]
    Conflict:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          description: An array of messages describing the conflict errors
          example: ["This user already exists. [name] and [email] must be a unique combination"]
    NotFound:
      type: object
      properties:
        errors:
          type: string
          description: An array of messages describing the not found errors
          example: ["The resource with id [8be3bb60-5ab4-4bd2-90e6-3b015691a827] does not exist"]
    PayrollSubmission:
      type: object
      required: 
        - id
        - account_id
        - entry_id
        - created_at
        - identity_information
        - employment_information
        - income_information
      properties:
        id:
          type: string
          format: uuid
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        account_id:
          type: string
          format: uuid
          description: The id of the account
          example: 674744df-9626-47ef-ae2b-4a491be136b5
        entry_id:
          type: string
          format: uuid
          description: The id of the entry
          example: be770ba4-1362-46cd-8c1c-2330ce3a8b69
        created_at:
          "$ref": "#/components/schemas/Date"
          description: The date the payroll was submitted
          example: 2019-05-17T00:00:00.000Z
        document_external_id:
          type: string
          description: A string coming from the parameters of the 
                       uploaded payslip1.pdf either the form field name
                       or `external_document_id` header for the file part.
                       It might not be unique and depends
                       on what's passed when uploading.
                       If the payroll submission doesn't originate from 
                       a payslip this will be null.
          example: payslip123456
        document_filename:
          type: string
          description: If the payroll submission originates from a payslip
                       this will be the file name of the uploaded payslip.
                       It will be duplicate if same file names are uploaded
                      If the payroll submission doesn't originate from 
                      a payslip this will be null.
          example: file1-payslip.pdf
        identity_information:
          $ref: '#/components/schemas/IdentityInformation'
        employment_information:
          $ref: '#/components/schemas/EmploymentInformation'
        income_information:
          $ref: '#/components/schemas/IncomeInformation'
    IdentityInformation:
      type: object
      properties:
        name:
          type: string
          description: The full name of the user
          example: John Smith
        date_of_birth:
          "$ref": "#/components/schemas/Date"
        address:
          $ref: '#/components/schemas/Address'
        email:
          type: string
          description: The email of the user
          format: email
          example: john.smith@company.com
        phone:
          type: string
          description: The phone number of the user
          example: +447123456789
        NI_number:
          type: string
          description: The national insurance number of the user
          example: AB123456C
    Address:
      type: object
      properties:
        street:
          type: string
          description: The street of the address
          example: 123 Main Street
        county:
          type: string
          description: The county of the address
          example: Greater London
        city:
          type: string
          description: The city of the address
          example: London
        post_code:
          type: string
          description: The post code of the address
          example: SW1A 1AA
        country:
          type: string
          description: The country of the address
          example: United Kingdom
    EmploymentInformation:
      type: object
      properties:
        employer_name:
          type: string
          description: The name of the employer
          example: Acme Ltd
        role:
          type: string
          description: The role of the user
          example: Software Engineer
        type:
          type: string
          description: The type of employment
          example: Full-time
        status:
          type: string
          description: The status of the employment
          example: Active
        start_date:
          "$ref": "#/components/schemas/Date"
        leave_date:
          "$ref": "#/components/schemas/Date"
          nullable: true
    IncomeInformation:
      type: object
      properties:
        pay_date:
          "$ref": "#/components/schemas/Date"
          type: string
          description: The date the payroll was submitted
          example: 2023-05-27
        pay_interval_start:
          "$ref": "#/components/schemas/Date"
          type: string
          description: The start date of the pay interval
          example: 2023-05-01
        pay_interval_end:
          "$ref": "#/components/schemas/Date"
          type: string
          description: The end date of the pay interval
          example: 2023-05-31
        pay_frequency:
          type: string
          description: The frequency of the pay
          example: Monthly
        earnings:
          $ref: '#/components/schemas/Earnings'
        deductions:
          $ref: '#/components/schemas/Deductions'
    Earnings:
      type: object
      properties:
        gross_pay:
          type: number
          description: The gross pay
          example: 3500
        net_pay:
          type: number
          description: The net pay
          example: 2500
        base_salary:
          type: number
          description: The base salary
          example: 3000
        bonus:
          type: number
          description: The bonus
          example: 500
    Deductions:
      type: object
      properties:
        income_tax:
          type: number
          description: The income tax
          example: 500
        employee_ni:
          type: number
          description: The employee national insurance
          example: 200
        employee_pension:
          type: number
          description: The employee pension
          example: 300
        total_deductions:
          type: number
          description: The total deductions
          example: 1000
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer token for authentication. The token should be the one returned by the /user-tokens endpoint.
